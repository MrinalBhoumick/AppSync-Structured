name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-region: ap-south-1
          role-to-assume: arn:aws:iam::992382729083:role/GitHubActionsRole
          role-session-name: GitHubActionsSession
          audience: sts.amazonaws.com

      - name: Install Docker
        run: |
          sudo apt-get update
          sudo apt-get install -y docker.io
          sudo systemctl start docker
          sudo systemctl enable docker
          sudo usermod -aG docker $USER

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Pull Docker image
        run: |
          docker pull 992382729083.dkr.ecr.ap-south-1.amazonaws.com/codebuild-custom-aml2023:latest

      - name: Run Docker container
        run: |
          docker run --rm -v ${{ github.workspace }}:/codebuild/repo -e S3_BUCKET=${{ secrets.S3_BUCKET }} 992382729083.dkr.ecr.ap-south-1.amazonaws.com/codebuild-custom-aml2023:latest /bin/bash -c "
            mkdir -p artifacts && \
            ARTIFACTS=$(aws s3 ls s3://$S3_BUCKET/ --recursive | grep 'last-successful-build.tar.gz' || echo 'No previous build found in S3') && \
            if [ \"$ARTIFACTS\" != \"No previous build found in S3\" ]; then \
              echo 'Previous build artifact found. Downloading...'; \
              aws s3 cp s3://$S3_BUCKET/last-successful-build.tar.gz artifacts/last-successful-build.tar.gz; \
            fi && \
            echo Creating AppSync API if it does not exist... && \
            bash scripts/create-api.sh || { echo 'API creation failed'; touch rollback.flag; exit 1; } && \
            echo Updating schema... && \
            bash scripts/update-schema.sh || { echo 'Schema update failed'; touch rollback.flag; exit 1; } && \
            echo Creating or updating the data source... && \
            bash scripts/create-update-data-source.sh || { echo 'Data source update failed'; touch rollback.flag; exit 1; } && \
            echo Updating request mapping templates... && \
            bash scripts/update-request-mapping-template.sh || { echo 'Request mapping update failed'; touch rollback.flag; exit 1; } && \
            echo Updating response mapping templates... && \
            bash scripts/update-response-mapping-template.sh || { echo 'Response mapping update failed'; touch rollback.flag; exit 1; } && \
            echo Updating Lambda authorizer... && \
            bash scripts/update-lambda-authorizer.sh || { echo 'Lambda authorizer update failed'; touch rollback.flag; exit 1; }"

      - name: Post Build Status
        run: |
          if [ -f rollback.flag ]; then
            echo "Build failed. Rolling back..."
            gh pr comment ${{ github.event.pull_request.number }} --body "$(printf '❌ Build failed. Rolled back to the previous successful build')"
          else
            echo "Build succeeded"
            gh pr comment ${{ github.event.pull_request.number }} --body "$(printf '✅ Build succeeded')"
          fi
        env:
          GH_TOKEN: ${{ secrets.XGITHUB_TOKEN }}

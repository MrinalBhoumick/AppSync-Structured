name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    
    permissions:
      id-token: write
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-region: ap-south-1
          role-to-assume: arn:aws:iam::992382729083:role/GitHubActionsRole
          role-session-name: GitHubActionsSession
          audience: sts.amazonaws.com

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Pull Docker image
        run: |
          docker pull 992382729083.dkr.ecr.ap-south-1.amazonaws.com/codebuild-custom-aml2023:latest

      - name: Run Docker container
        run: |
          docker run --rm -v ${{ github.workspace }}:/codebuild/repo -e S3_BUCKET=${{ secrets.S3_BUCKET }} 992382729083.dkr.ecr.ap-south-1.amazonaws.com/codebuild-custom-aml2023:latest /bin/bash -c "
            mkdir -p artifacts && \
            ARTIFACTS=$(aws s3 ls s3://$S3_BUCKET/ --recursive | grep 'last-successful-build.tar.gz' || echo 'No previous build found in S3') && \
            if [ \"$ARTIFACTS\" != \"No previous build found in S3\" ]; then \
              echo 'Previous build artifact found. Downloading...'; \
              aws s3 cp s3://$S3_BUCKET/last-successful-build.tar.gz artifacts/last-successful-build.tar.gz; \
            fi && \
            echo Creating AppSync API if it does not exist... && \
            bash scripts/create-api.sh || { echo 'API creation failed'; touch rollback.flag; exit 1; } && \
            echo Updating schema... && \
            bash scripts/update-schema.sh || { echo 'Schema update failed'; touch rollback.flag; exit 1; } && \
            echo Creating or updating the data source... && \
            bash scripts/create-update-data-source.sh || { echo 'Data source update failed'; touch rollback.flag; exit 1; } && \
            echo Updating request mapping templates... && \
            bash scripts/update-request-mapping-template.sh || { echo 'Request mapping update failed'; touch rollback.flag; exit 1; } && \
            echo Updating response mapping templates... && \
            bash scripts/update-response-mapping-template.sh || { echo 'Response mapping update failed'; touch rollback.flag; exit 1; } && \
            echo Updating Lambda authorizer... && \
            bash scripts/update-lambda-authorizer.sh || { echo 'Lambda authorizer update failed'; touch rollback.flag; exit 1; }"

      - name: Wait for CodePipeline to complete
        run: |
          sleep 45

      - name: Check CodePipeline status
        id: codepipeline-status
        run: |
          PIPELINE_STATUS=$(aws codepipeline get-pipeline-execution --pipeline-name ${{ secrets.CODEPIPELINE_NAME }} --stage-name Build --action-name BuildAction --query 'pipelineExecution.status' --output text)
          echo "Pipeline status: $PIPELINE_STATUS"
          echo "::set-output name=status::$PIPELINE_STATUS"

      - name: Post Build Status on Commit
        run: |
          if [ "${{ steps.codepipeline-status.outputs.status }}" == "Succeeded" ]; then
            curl -X POST \
              -H "Authorization: token ${{ secrets.XGITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              -d '{"body": "✅ Build succeeded", "context": "continuous-integration/github-actions"}' \
              "https://api.github.com/repos/${{ github.repository }}/commits/${{ github.sha }}/comments"
          else
            curl -X POST \
              -H "Authorization: token ${{ secrets.XGITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              -d '{"body": "❌ Build failed", "context": "continuous-integration/github-actions"}' \
              "https://api.github.com/repos/${{ github.repository }}/commits/${{ github.sha }}/comments"
          fi
        env:
          GH_TOKEN: ${{ secrets.XGITHUB_TOKEN }}
